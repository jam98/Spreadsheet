// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 10.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
using System.Windows.Forms;


namespace CodedUITest
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public partial class UIMap
    {
        /// <summary>
        /// EnterADouble - Use 'EnterADoubleParams' to pass parameters into this method.
        /// </summary>
        public void EnterADouble()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UISpreadsheetWindow.UIItemWindow.UIItemEdit;
            #endregion

            // Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uISpreadsheetWindow = ApplicationUnderTest.Launch(this.EnterADoubleParams.UISpreadsheetWindowExePath, this.EnterADoubleParams.UISpreadsheetWindowAlternateExePath);

            // Type '2' in 'Unknown Name' text box
            uIItemEdit.Text = this.EnterADoubleParams.UIItemEditText;

            // Type '{Enter}' in 'Unknown Name' text box
            Keyboard.SendKeys(uIItemEdit, this.EnterADoubleParams.UIItemEditSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// AssertMethod1 - Use 'AssertMethod1ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod1()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UISpreadsheetWindow.UIItemWindow.UIItemEdit;
            WinEdit uIItemEdit1 = this.UISpreadsheetWindow.UIItemWindow2.UIItemEdit;
            WinEdit uIItemEdit2 = this.UISpreadsheetWindow.UIA1Window.UIItemEdit;
            #endregion

            // Verify that 'Unknown Name' text box's property 'Text' equals '2'
            Assert.AreEqual(this.AssertMethod1ExpectedValues.UIItemEditText, uIItemEdit.Text);

            // Verify that 'Unknown Name' text box's property 'Text' equals '2'
            Assert.AreEqual(this.AssertMethod1ExpectedValues.UIItemEditText1, uIItemEdit1.Text);

            // Verify that 'Unknown Name' text box's property 'Text' equals 'A1'
            Assert.AreEqual(this.AssertMethod1ExpectedValues.UIItemEditText2, uIItemEdit2.Text);
        }
        
        /// <summary>
        /// RecordedMethod1 - Use 'RecordedMethod1Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod1()
        {
            #region Variable Declarations
            WinClient uISSPanelClient = this.UISpreadsheetWindow.UIItemWindow1.UISSPanelClient;
            WinEdit uIItemEdit = this.UISpreadsheetWindow.UIItemWindow.UIItemEdit;
            #endregion

            // Click 'SSPanel' client
            Mouse.Click(uISSPanelClient, new Point(151, 62));

            // Type 'string yes' in 'Unknown Name' text box
            uIItemEdit.Text = this.RecordedMethod1Params.UIItemEditText;

            // Type '{Enter}' in 'Unknown Name' text box
            Keyboard.SendKeys(uIItemEdit, this.RecordedMethod1Params.UIItemEditSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// AssertMethod2 - Use 'AssertMethod2ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod2()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UISpreadsheetWindow.UIItemWindow.UIItemEdit;
            WinEdit uIItemEdit1 = this.UISpreadsheetWindow.UIItemWindow2.UIItemEdit;
            WinEdit uIItemEdit2 = this.UISpreadsheetWindow.UIA1Window.UIItemEdit;
            #endregion

            // Verify that 'Unknown Name' text box's property 'Text' equals 'string yes'
            Assert.AreEqual(this.AssertMethod2ExpectedValues.UIItemEditText, uIItemEdit.Text);

            // Verify that 'Unknown Name' text box's property 'Text' equals 'string yes'
            Assert.AreEqual(this.AssertMethod2ExpectedValues.UIItemEditText1, uIItemEdit1.Text);

            // Verify that 'Unknown Name' text box's property 'Text' equals 'B2'
            Assert.AreEqual(this.AssertMethod2ExpectedValues.UIItemEditText2, uIItemEdit2.Text);
        }
        
        /// <summary>
        /// RecordedMethod2 - Use 'RecordedMethod2Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod2()
        {
            #region Variable Declarations
            WinClient uISSPanelClient = this.UISpreadsheetWindow.UIItemWindow1.UISSPanelClient;
            WinEdit uIItemEdit = this.UISpreadsheetWindow.UIItemWindow.UIItemEdit;
            #endregion

            // Click 'SSPanel' client
            Mouse.Click(uISSPanelClient, new Point(228, 88));

            // Type '=3+4' in 'Unknown Name' text box
            uIItemEdit.Text = this.RecordedMethod2Params.UIItemEditText;

            // Type '{Enter}' in 'Unknown Name' text box
            Keyboard.SendKeys(uIItemEdit, this.EnterADoubleParams.UIItemEditSendKeys, ModifierKeys.None);

            //// Type '=3+4' in 'Unknown Name' text box
            //uIItemEdit.Text = this.RecordedMethod2Params.UIItemEditText;

            //// Type '{Enter}' in 'Unknown Name' text box
            //Keyboard.SendKeys(uIItemEdit, this.EnterADoubleParams.UIItemEditSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// AssertMethod3 - Use 'AssertMethod3ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod3()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UISpreadsheetWindow.UIItemWindow.UIItemEdit;
            WinEdit uIItemEdit1 = this.UISpreadsheetWindow.UIItemWindow2.UIItemEdit;
            WinEdit uIItemEdit2 = this.UISpreadsheetWindow.UIA1Window.UIItemEdit;
            #endregion

            // Verify that 'Unknown Name' text box's property 'Text' equals '3+4'
            Assert.AreEqual(this.AssertMethod3ExpectedValues.UIItemEditText, uIItemEdit.Text);

            // Verify that 'Unknown Name' text box's property 'Text' equals '7'
            Assert.AreEqual(this.AssertMethod3ExpectedValues.UIItemEditText1, uIItemEdit1.Text);

            // Verify that 'Unknown Name' text box's property 'Text' equals 'C3'
            Assert.AreEqual(this.AssertMethod3ExpectedValues.UIItemEditText2, uIItemEdit2.Text);
        }
        
        /// <summary>
        /// RecordedMethod3 - Use 'RecordedMethod3Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod3()
        {
            #region Variable Declarations
            WinClient uISSPanelClient = this.UISpreadsheetWindow.UIItemWindow1.UISSPanelClient;
            WinEdit uIItemEdit = this.UISpreadsheetWindow.UIItemWindow.UIItemEdit;
            #endregion

            // Click 'SSPanel' client
            Mouse.Click(uISSPanelClient, new Point(320, 100));

            // Type '=a1' in 'Unknown Name' text box
            uIItemEdit.Text = this.RecordedMethod3Params.UIItemEditText;

            // Type '{Enter}' in 'Unknown Name' text box
            Keyboard.SendKeys(uIItemEdit, this.EnterADoubleParams.UIItemEditSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// AssertMethod4 - Use 'AssertMethod4ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod4()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UISpreadsheetWindow.UIItemWindow.UIItemEdit;
            WinEdit uIItemEdit1 = this.UISpreadsheetWindow.UIItemWindow2.UIItemEdit;
            WinEdit uIItemEdit2 = this.UISpreadsheetWindow.UIA1Window.UIItemEdit;
            #endregion

            // Verify that 'Unknown Name' text box's property 'Text' equals 'A1'
            Assert.AreEqual(this.AssertMethod4ExpectedValues.UIItemEditText, uIItemEdit.Text);

            // Verify that 'Unknown Name' text box's property 'Text' equals '2'
            Assert.AreEqual(this.AssertMethod4ExpectedValues.UIItemEditText1, uIItemEdit1.Text);

            // Verify that 'Unknown Name' text box's property 'Text' equals 'D4'
            Assert.AreEqual(this.AssertMethod4ExpectedValues.UIItemEditText2, uIItemEdit2.Text);
        }
        
        /// <summary>
        /// RecordedMethod4
        /// </summary>
        public void RecordedMethod4()
        {
            #region Variable Declarations
            WinMenuItem uIHelpMenuItem = this.UISpreadsheetWindow.UIButtonStripMenuBar.UIHelpMenuItem;
            #endregion

            // Click 'Help' menu item
            Mouse.Click(uIHelpMenuItem, new Point(36, 11));
        }
        
        /// <summary>
        /// AssertMethod5
        /// </summary>
        public void AssertMethod5()
        {
            #region Variable Declarations
            WinText uIToopenanewspreadsheeText = this.UIToopenanewspreadsheeWindow.UIToopenanewspreadsheeText;
            #endregion

            // Verify that 'To open a new spreadsheet, select File > New. To o...' label's property 'DisplayText' is not equal to 'null'
            Assert.IsNotNull(uIToopenanewspreadsheeText.DisplayText);
        }
        
        /// <summary>
        /// RecordedMethod5
        /// </summary>
        public void RecordedMethod5()
        {
            #region Variable Declarations
            WinButton uIOKButton = this.UIOKWindow.UIOKButton;
            WinMenuItem uINewMenuItem = this.UISpreadsheetWindow.UIButtonStripMenuBar.UIFileMenuItem.UINewMenuItem;
            #endregion

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(51, 9));

            // Click 'File' -> 'New' menu item
            Mouse.Click(uINewMenuItem, new Point(46, 12));
        }
        
        /// <summary>
        /// AssertMethod6 - Use 'AssertMethod6ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod6()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UISpreadsheetWindow1.UIItemWindow1.UIItemEdit;
            #endregion

            // Verify that 'Unknown Name' text box's property 'Text' equals ''
            Assert.AreEqual(this.AssertMethod6ExpectedValues.UIItemEditText, uIItemEdit.Text);
        }
        
        /// <summary>
        /// RecordedMethod6
        /// </summary>
        public void RecordedMethod6()
        {
            #region Variable Declarations
            WinMenuItem uICloseMenuItem = this.UISpreadsheetWindow1.UIButtonStripMenuBar.UIFileMenuItem.UICloseMenuItem;
            WinMenuItem uICloseMenuItem1 = this.UISpreadsheetWindow.UIButtonStripMenuBar.UIFileMenuItem.UICloseMenuItem;
            #endregion

            // Click 'File' -> 'Close' menu item
            Mouse.Click(uICloseMenuItem, new Point(88, 9));

            // Click 'File' -> 'Close' menu item
            Mouse.Click(uICloseMenuItem1, new Point(78, 7));
        }
        
        /// <summary>
        /// AssertMethod7 - Use 'AssertMethod7ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod7()
        {
            #region Variable Declarations
            WinWindow uIWarningWindow = this.UIWarningWindow;
            #endregion

            // Verify that 'Warning' window's property 'Name' equals 'Warning'
            Assert.AreEqual(this.AssertMethod7ExpectedValues.UIWarningWindowName, uIWarningWindow.Name);
        }
        
        /// <summary>
        /// RecordedMethod7
        /// </summary>
        public void RecordedMethod7()
        {
            #region Variable Declarations
            WinButton uINOButton = this.UIWarningWindow.UINOWindow.UINOButton;
            #endregion

            // Click '&No' button
            Mouse.Click(uINOButton, new Point(72, 10));
        }
        
        /// <summary>
        /// AssertMethod8 - Use 'AssertMethod8ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod8()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UISpreadsheetWindow.UIItemWindow.UIItemEdit;
            WinEdit uIItemEdit1 = this.UISpreadsheetWindow.UIA1Window.UIItemEdit;
            #endregion

            // Verify that 'Unknown Name' text box's property 'Text' equals 'A1'
            Assert.AreEqual(this.AssertMethod8ExpectedValues.UIItemEditText, uIItemEdit.Text);

            // Verify that 'Unknown Name' text box's property 'Text' equals 'D4'
            Assert.AreEqual(this.AssertMethod8ExpectedValues.UIItemEditText1, uIItemEdit1.Text);
        }
        
        /// <summary>
        /// RecordedMethod8
        /// </summary>
        public void RecordedMethod8()
        {
            #region Variable Declarations
            WinMenuItem uIFileMenuItem = this.UISpreadsheetWindow.UIButtonStripMenuBar.UIFileMenuItem;
            WinMenuItem uIOpenMenuItem = this.UISpreadsheetWindow.UIButtonStripMenuBar.UIFileMenuItem.UIOpenMenuItem;
            WinEdit uINameEdit = this.UIOpenWindow.UIItemWindow.UITestssListItem.UINameEdit;
            WinComboBox uIFilenameComboBox = this.UIOpenWindow.UIItemWindow2.UIFilenameComboBox;
            WinSplitButton uIOpenSplitButton = this.UIOpenWindow.UIOpenWindow1.UIOpenSplitButton;
            #endregion

            // Click 'File' menu item
            Mouse.Click(uIFileMenuItem, new Point(14, 12));

            // Click 'File' -> 'Open' menu item
            Mouse.Click(uIOpenMenuItem, new Point(70, 10));

            // Select 'test.ss' in 'File name:' combo box
            uIFilenameComboBox.EditableItem = this.ReplaceOpenClicksParams.UIFilenameComboBoxEditableItem;

            // Click '&Open' split button
            Mouse.Click(uIOpenSplitButton, new Point(45, 21));
        }
        
        /// <summary>
        /// AssertMethod9 - Use 'AssertMethod9ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod9()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UISpreadsheetWindow1.UITestWindow.UIItemEdit;
            WinEdit uIItemEdit1 = this.UISpreadsheetWindow1.UIA1Window.UIItemEdit;
            #endregion

            // Verify that 'Unknown Name' text box's property 'Text' equals 'Test'
            Assert.AreEqual(this.AssertMethod9ExpectedValues.UIItemEditText, uIItemEdit.Text);

            // Verify that 'Unknown Name' text box's property 'Text' equals 'A1'
            Assert.AreEqual(this.AssertMethod9ExpectedValues.UIItemEditText1, uIItemEdit1.Text);
        }
        
        /// <summary>
        /// RecordedMethod9
        /// </summary>
        public void RecordedMethod9()
        {
            #region Variable Declarations
            WinClient uISSPanelClient = this.UISpreadsheetWindow1.UIItemWindow.UISSPanelClient;
            #endregion

            // Click 'SSPanel' client
            Mouse.Click(uISSPanelClient, new Point(226, 76));
        }
        
        /// <summary>
        /// AssertMethod10 - Use 'AssertMethod10ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod10()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UISpreadsheetWindow1.UITestWindow.UIItemEdit;
            WinEdit uIItemEdit1 = this.UISpreadsheetWindow1.UIA1Window.UIItemEdit;
            #endregion

            // Verify that 'Unknown Name' text box's property 'Text' equals '42+(90/2)'
            Assert.AreEqual(this.AssertMethod10ExpectedValues.UIItemEditText, uIItemEdit.Text);

            // Verify that 'Unknown Name' text box's property 'Text' equals 'C3'
            Assert.AreEqual(this.AssertMethod10ExpectedValues.UIItemEditText1, uIItemEdit1.Text);
        }
        
        /// <summary>
        /// RecordedMethod10 - Use 'RecordedMethod10Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod10()
        {
            #region Variable Declarations
            WinMenuItem uISaveMenuItem = this.UISpreadsheetWindow1.UIButtonStripMenuBar.UIFileMenuItem.UISaveMenuItem;
            WinClient uISSPanelClient = this.UISpreadsheetWindow1.UIItemWindow.UISSPanelClient;
            WinEdit uIItemEdit = this.UISpreadsheetWindow1.UITestWindow.UIItemEdit;
            #endregion

            // Click 'File' -> 'Save' menu item
            Mouse.Click(uISaveMenuItem, new Point(35, 10));

            // Click 'SSPanel' client
            Mouse.Click(uISSPanelClient, new Point(258, 179));

            // Click 'SSPanel' client
            Mouse.Click(uISSPanelClient, new Point(612, 186));

            // Type '1' in 'Unknown Name' text box
            uIItemEdit.Text = this.RecordedMethod10Params.UIItemEditText;

            // Type '{Enter}' in 'Unknown Name' text box
            Keyboard.SendKeys(uIItemEdit, this.RecordedMethod10Params.UIItemEditSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// AssertMethod11 - Use 'AssertMethod11ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod11()
        {
            #region Variable Declarations
            WinEdit uIItemEdit = this.UISpreadsheetWindow1.UITestWindow.UIItemEdit;
            WinEdit uIItemEdit1 = this.UISpreadsheetWindow1.UIA1Window.UIItemEdit;
            #endregion

            // Verify that 'Unknown Name' text box's property 'Text' equals '1'
            Assert.AreEqual(this.AssertMethod11ExpectedValues.UIItemEditText, uIItemEdit.Text);

            // Verify that 'Unknown Name' text box's property 'Text' equals 'H8'
            Assert.AreEqual(this.AssertMethod11ExpectedValues.UIItemEditText1, uIItemEdit1.Text);
        }
        
        /// <summary>
        /// RecordedMethod11
        /// </summary>
        public void RecordedMethod11()
        {
            #region Variable Declarations
            WinMenuItem uICloseMenuItem = this.UISpreadsheetWindow1.UIButtonStripMenuBar.UIFileMenuItem.UICloseMenuItem;
            #endregion

            // Click 'File' -> 'Close' menu item
            Mouse.Click(uICloseMenuItem, new Point(50, 5));
        }
        
        /// <summary>
        /// AssertMethod12 - Use 'AssertMethod12ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod12()
        {
            #region Variable Declarations
            WinTitleBar uIWarningTitleBar = this.UIWarningWindow.UIWarningTitleBar;
            #endregion

            // Verify that 'Warning' title bar's property 'FriendlyName' equals 'Warning'
            Assert.AreEqual(this.AssertMethod12ExpectedValues.UIWarningTitleBarFriendlyName, uIWarningTitleBar.FriendlyName);
        }
        
        /// <summary>
        /// RecordedMethod12
        /// </summary>
        public void RecordedMethod12()
        {
            #region Variable Declarations
            WinButton uINOButton = this.UIWarningWindow.UINOWindow.UINOButton;
            WinMenuItem uICloseMenuItem = this.UISpreadsheetWindow1.UIButtonStripMenuBar.UIFileMenuItem.UICloseMenuItem;
            WinButton uIYesButton = this.UIWarningWindow.UIYesWindow.UIYesButton;
            WinMenuItem uIOpenMenuItem = this.UISpreadsheetWindow.UIButtonStripMenuBar.UIFileMenuItem.UIOpenMenuItem;
            WinEdit uINameEdit = this.UIOpenWindow.UIItemWindow.UITestssListItem.UINameEdit;
            WinSplitButton uIOpenSplitButton = this.UIOpenWindow.UIOpenWindow1.UIOpenSplitButton;
            WinMenuItem uIFileMenuItem = this.UISpreadsheetWindow.UIButtonStripMenuBar.UIFileMenuItem;
            WinComboBox uIFilenameComboBox = this.UIOpenWindow.UIItemWindow2.UIFilenameComboBox;
            WinMenuItem uISaveAsMenuItem = this.UISpreadsheetWindow1.UIButtonStripMenuBar.UIFileMenuItem.UISaveAsMenuItem;
            #endregion

            // Click '&No' button
            Mouse.Click(uINOButton, new Point(58, 9));

            // Click 'File' -> 'Close' menu item
            Mouse.Click(uICloseMenuItem, new Point(54, 13));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(66, 12));

            // Click 'File' menu item
            Mouse.Click(uIFileMenuItem, new Point(14, 12));

            // Click 'File' -> 'Open' menu item
            Mouse.Click(uIOpenMenuItem, new Point(70, 10));

            // Select 'test.ss' in 'File name:' combo box
            uIFilenameComboBox.EditableItem = this.ReplaceOpenClicksParams.UIFilenameComboBoxEditableItem;

            // Click '&Open' split button
            Mouse.Click(uIOpenSplitButton, new Point(45, 21));

            // Click 'File' -> 'Save As...' menu item
            Mouse.Click(uISaveAsMenuItem, new Point(67, 8));
        }
        
        /// <summary>
        /// AssertMethod13 - Use 'AssertMethod13ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod13()
        {
            #region Variable Declarations
            WinTitleBar uISaveAsTitleBar = this.UISaveAsWindow.UISaveAsTitleBar;
            #endregion

            // Verify that 'Save As' title bar's property 'FriendlyName' equals 'Save As'
            Assert.AreEqual(this.AssertMethod13ExpectedValues.UISaveAsTitleBarFriendlyName, uISaveAsTitleBar.FriendlyName);
        }
        
        /// <summary>
        /// RecordedMethod13
        /// </summary>
        public void RecordedMethod13()
        {
            #region Variable Declarations
            WinButton uICancelButton = this.UISaveAsWindow.UICancelWindow.UICancelButton;
            WinMenuItem uICloseMenuItem = this.UISpreadsheetWindow1.UIButtonStripMenuBar.UIFileMenuItem.UICloseMenuItem;
            WinMenuItem uICloseMenuItem1 = this.UISpreadsheetWindow.UIButtonStripMenuBar.UIFileMenuItem.UICloseMenuItem;
            WinButton uIYesButton = this.UIWarningWindow.UIYesWindow.UIYesButton;
            #endregion

            // Click 'Cancel' button
            Mouse.Click(uICancelButton, new Point(26, 10));

            // Click 'File' -> 'Close' menu item
            Mouse.Click(uICloseMenuItem, new Point(80, 5));

            // Click 'File' -> 'Close' menu item
            Mouse.Click(uICloseMenuItem1, new Point(73, 12));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(55, 14));
        }
        
        /// <summary>
        /// ReplaceOpenClicks - Use 'ReplaceOpenClicksParams' to pass parameters into this method.
        /// </summary>
        public void ReplaceOpenClicks()
        {
            #region Variable Declarations
            WinComboBox uIFilenameComboBox = this.UIOpenWindow.UIItemWindow2.UIFilenameComboBox;
            WinSplitButton uIOpenSplitButton = this.UIOpenWindow.UIOpenWindow1.UIOpenSplitButton;
            #endregion

            // Select 'test.ss' in 'File name:' combo box
            uIFilenameComboBox.EditableItem = this.ReplaceOpenClicksParams.UIFilenameComboBoxEditableItem;

            // Click '&Open' split button
            Mouse.Click(uIOpenSplitButton, new Point(45, 21));
        }
        
        #region Properties
        public virtual OpenAndCloseParams OpenAndCloseParams
        {
            get
            {
                if ((this.mOpenAndCloseParams == null))
                {
                    this.mOpenAndCloseParams = new OpenAndCloseParams();
                }
                return this.mOpenAndCloseParams;
            }
        }
        
        public virtual AllStepsParams AllStepsParams
        {
            get
            {
                if ((this.mAllStepsParams == null))
                {
                    this.mAllStepsParams = new AllStepsParams();
                }
                return this.mAllStepsParams;
            }
        }
        
        public virtual EnterADoubleParams EnterADoubleParams
        {
            get
            {
                if ((this.mEnterADoubleParams == null))
                {
                    this.mEnterADoubleParams = new EnterADoubleParams();
                }
                return this.mEnterADoubleParams;
            }
        }
        
        public virtual AssertMethod1ExpectedValues AssertMethod1ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod1ExpectedValues == null))
                {
                    this.mAssertMethod1ExpectedValues = new AssertMethod1ExpectedValues();
                }
                return this.mAssertMethod1ExpectedValues;
            }
        }
        
        public virtual RecordedMethod1Params RecordedMethod1Params
        {
            get
            {
                if ((this.mRecordedMethod1Params == null))
                {
                    this.mRecordedMethod1Params = new RecordedMethod1Params();
                }
                return this.mRecordedMethod1Params;
            }
        }
        
        public virtual AssertMethod2ExpectedValues AssertMethod2ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod2ExpectedValues == null))
                {
                    this.mAssertMethod2ExpectedValues = new AssertMethod2ExpectedValues();
                }
                return this.mAssertMethod2ExpectedValues;
            }
        }
        
        public virtual RecordedMethod2Params RecordedMethod2Params
        {
            get
            {
                if ((this.mRecordedMethod2Params == null))
                {
                    this.mRecordedMethod2Params = new RecordedMethod2Params();
                }
                return this.mRecordedMethod2Params;
            }
        }
        
        public virtual AssertMethod3ExpectedValues AssertMethod3ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod3ExpectedValues == null))
                {
                    this.mAssertMethod3ExpectedValues = new AssertMethod3ExpectedValues();
                }
                return this.mAssertMethod3ExpectedValues;
            }
        }
        
        public virtual RecordedMethod3Params RecordedMethod3Params
        {
            get
            {
                if ((this.mRecordedMethod3Params == null))
                {
                    this.mRecordedMethod3Params = new RecordedMethod3Params();
                }
                return this.mRecordedMethod3Params;
            }
        }
        
        public virtual AssertMethod4ExpectedValues AssertMethod4ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod4ExpectedValues == null))
                {
                    this.mAssertMethod4ExpectedValues = new AssertMethod4ExpectedValues();
                }
                return this.mAssertMethod4ExpectedValues;
            }
        }
        
        public virtual AssertMethod6ExpectedValues AssertMethod6ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod6ExpectedValues == null))
                {
                    this.mAssertMethod6ExpectedValues = new AssertMethod6ExpectedValues();
                }
                return this.mAssertMethod6ExpectedValues;
            }
        }
        
        public virtual AssertMethod7ExpectedValues AssertMethod7ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod7ExpectedValues == null))
                {
                    this.mAssertMethod7ExpectedValues = new AssertMethod7ExpectedValues();
                }
                return this.mAssertMethod7ExpectedValues;
            }
        }
        
        public virtual AssertMethod8ExpectedValues AssertMethod8ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod8ExpectedValues == null))
                {
                    this.mAssertMethod8ExpectedValues = new AssertMethod8ExpectedValues();
                }
                return this.mAssertMethod8ExpectedValues;
            }
        }
        
        public virtual AssertMethod9ExpectedValues AssertMethod9ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod9ExpectedValues == null))
                {
                    this.mAssertMethod9ExpectedValues = new AssertMethod9ExpectedValues();
                }
                return this.mAssertMethod9ExpectedValues;
            }
        }
        
        public virtual AssertMethod10ExpectedValues AssertMethod10ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod10ExpectedValues == null))
                {
                    this.mAssertMethod10ExpectedValues = new AssertMethod10ExpectedValues();
                }
                return this.mAssertMethod10ExpectedValues;
            }
        }
        
        public virtual RecordedMethod10Params RecordedMethod10Params
        {
            get
            {
                if ((this.mRecordedMethod10Params == null))
                {
                    this.mRecordedMethod10Params = new RecordedMethod10Params();
                }
                return this.mRecordedMethod10Params;
            }
        }
        
        public virtual AssertMethod11ExpectedValues AssertMethod11ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod11ExpectedValues == null))
                {
                    this.mAssertMethod11ExpectedValues = new AssertMethod11ExpectedValues();
                }
                return this.mAssertMethod11ExpectedValues;
            }
        }
        
        public virtual AssertMethod12ExpectedValues AssertMethod12ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod12ExpectedValues == null))
                {
                    this.mAssertMethod12ExpectedValues = new AssertMethod12ExpectedValues();
                }
                return this.mAssertMethod12ExpectedValues;
            }
        }
        
        public virtual AssertMethod13ExpectedValues AssertMethod13ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod13ExpectedValues == null))
                {
                    this.mAssertMethod13ExpectedValues = new AssertMethod13ExpectedValues();
                }
                return this.mAssertMethod13ExpectedValues;
            }
        }
        
        public virtual ReplaceOpenClicksParams ReplaceOpenClicksParams
        {
            get
            {
                if ((this.mReplaceOpenClicksParams == null))
                {
                    this.mReplaceOpenClicksParams = new ReplaceOpenClicksParams();
                }
                return this.mReplaceOpenClicksParams;
            }
        }
        
        public UISpreadsheetWindow UISpreadsheetWindow
        {
            get
            {
                if ((this.mUISpreadsheetWindow == null))
                {
                    this.mUISpreadsheetWindow = new UISpreadsheetWindow();
                }
                return this.mUISpreadsheetWindow;
            }
        }
        
        public UIOKWindow UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow();
                }
                return this.mUIOKWindow;
            }
        }
        
        public UISpreadsheetWindow1 UISpreadsheetWindow1
        {
            get
            {
                if ((this.mUISpreadsheetWindow1 == null))
                {
                    this.mUISpreadsheetWindow1 = new UISpreadsheetWindow1();
                }
                return this.mUISpreadsheetWindow1;
            }
        }
        
        public UIOpenWindow UIOpenWindow
        {
            get
            {
                if ((this.mUIOpenWindow == null))
                {
                    this.mUIOpenWindow = new UIOpenWindow();
                }
                return this.mUIOpenWindow;
            }
        }
        
        public UIWarningWindow UIWarningWindow
        {
            get
            {
                if ((this.mUIWarningWindow == null))
                {
                    this.mUIWarningWindow = new UIWarningWindow();
                }
                return this.mUIWarningWindow;
            }
        }
        
        public UISaveAsWindow UISaveAsWindow
        {
            get
            {
                if ((this.mUISaveAsWindow == null))
                {
                    this.mUISaveAsWindow = new UISaveAsWindow();
                }
                return this.mUISaveAsWindow;
            }
        }
        
        public UIConfirmSaveAsWindow UIConfirmSaveAsWindow
        {
            get
            {
                if ((this.mUIConfirmSaveAsWindow == null))
                {
                    this.mUIConfirmSaveAsWindow = new UIConfirmSaveAsWindow();
                }
                return this.mUIConfirmSaveAsWindow;
            }
        }
        
        public UIToopenanewspreadsheeWindow UIToopenanewspreadsheeWindow
        {
            get
            {
                if ((this.mUIToopenanewspreadsheeWindow == null))
                {
                    this.mUIToopenanewspreadsheeWindow = new UIToopenanewspreadsheeWindow();
                }
                return this.mUIToopenanewspreadsheeWindow;
            }
        }
        #endregion
        
        #region Fields
        private OpenAndCloseParams mOpenAndCloseParams;
        
        private AllStepsParams mAllStepsParams;
        
        private EnterADoubleParams mEnterADoubleParams;
        
        private AssertMethod1ExpectedValues mAssertMethod1ExpectedValues;
        
        private RecordedMethod1Params mRecordedMethod1Params;
        
        private AssertMethod2ExpectedValues mAssertMethod2ExpectedValues;
        
        private RecordedMethod2Params mRecordedMethod2Params;
        
        private AssertMethod3ExpectedValues mAssertMethod3ExpectedValues;
        
        private RecordedMethod3Params mRecordedMethod3Params;
        
        private AssertMethod4ExpectedValues mAssertMethod4ExpectedValues;
        
        private AssertMethod6ExpectedValues mAssertMethod6ExpectedValues;
        
        private AssertMethod7ExpectedValues mAssertMethod7ExpectedValues;
        
        private AssertMethod8ExpectedValues mAssertMethod8ExpectedValues;
        
        private AssertMethod9ExpectedValues mAssertMethod9ExpectedValues;
        
        private AssertMethod10ExpectedValues mAssertMethod10ExpectedValues;
        
        private RecordedMethod10Params mRecordedMethod10Params;
        
        private AssertMethod11ExpectedValues mAssertMethod11ExpectedValues;
        
        private AssertMethod12ExpectedValues mAssertMethod12ExpectedValues;
        
        private AssertMethod13ExpectedValues mAssertMethod13ExpectedValues;
        
        private ReplaceOpenClicksParams mReplaceOpenClicksParams;
        
        private UISpreadsheetWindow mUISpreadsheetWindow;
        
        private UIOKWindow mUIOKWindow;
        
        private UISpreadsheetWindow1 mUISpreadsheetWindow1;
        
        private UIOpenWindow mUIOpenWindow;
        
        private UIWarningWindow mUIWarningWindow;
        
        private UISaveAsWindow mUISaveAsWindow;
        
        private UIConfirmSaveAsWindow mUIConfirmSaveAsWindow;
        
        private UIToopenanewspreadsheeWindow mUIToopenanewspreadsheeWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'OpenAndClose'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class OpenAndCloseParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowExePath = "..\\bin\\Debug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowAlternateExePath = "..\\..\\..\\SpreadsheetGUI\\bin\\Debug\\SpreadsheetGUI.exe";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AllSteps'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class AllStepsParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowExePath = "..\\bin\\Debug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowAlternateExePath = "..\\..\\..\\SpreadsheetGUI\\bin\\Debug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Type '3' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditText = "3";
        
        /// <summary>
        /// Type '{Enter}' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type 'hello' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditText1 = "hello";
        
        /// <summary>
        /// Type '{Enter}' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditSendKeys1 = "{Enter}";
        
        /// <summary>
        /// Type '3+2' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditText2 = "3+2";
        
        /// <summary>
        /// Type 'A1' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditText3 = "A1";
        
        /// <summary>
        /// Type 'C1' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditText4 = "C1";
        
        /// <summary>
        /// Type '=c5' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditText5 = "=c5";
        
        /// <summary>
        /// Type '{Enter}' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditSendKeys2 = "{Enter}";
        
        /// <summary>
        /// Type '{Enter}' in 'OK' button
        /// </summary>
        public string UIOKButtonSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '=c5' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditText6 = "=c5";
        
        /// <summary>
        /// Type '{Enter}' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditSendKeys3 = "{Enter}";
        
        /// <summary>
        /// Type '{Enter}' in 'OK' button
        /// </summary>
        public string UIOKButtonSendKeys1 = "{Enter}";
        
        /// <summary>
        /// Type '2/0' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditText7 = "2/0";
        
        /// <summary>
        /// Type 'A1+4' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditText8 = "A1+4";
        
        /// <summary>
        /// Type '2' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditText9 = "2";
        
        /// <summary>
        /// Type '{Enter}' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditSendKeys4 = "{Enter}";
        
        /// <summary>
        /// Type '1' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditText10 = "1";
        
        /// <summary>
        /// Type '{Enter}' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditSendKeys5 = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'EnterADouble'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class EnterADoubleParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowExePath = "..\\..\\..\\SpreadsheetGUI\\bin\\Debug\\SpreadsheetGUI.exe";//"..\\bin\\Debug\\SpreadsheetGUI.exe";
            //"C:\\Users\\Weston\\Documents\\Visual Studio 2010\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debu" +
            //"g\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UISpreadsheetWindowAlternateExePath = "..\\bin\\Debug\\SpreadsheetGUI.exe";
            //"%VisualStudioDir%\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Type '2' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditText = "2";
        
        /// <summary>
        /// Type '{Enter}' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class AssertMethod1ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'Unknown Name' text box's property 'Text' equals '2'
        /// </summary>
        public string UIItemEditText = "2";
        
        /// <summary>
        /// Verify that 'Unknown Name' text box's property 'Text' equals '2'
        /// </summary>
        public string UIItemEditText1 = "2";
        
        /// <summary>
        /// Verify that 'Unknown Name' text box's property 'Text' equals 'A1'
        /// </summary>
        public string UIItemEditText2 = "A1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class RecordedMethod1Params
    {
        
        #region Fields
        /// <summary>
        /// Type 'string yes' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditText = "string yes";
        
        /// <summary>
        /// Type '{Enter}' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class AssertMethod2ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'Unknown Name' text box's property 'Text' equals 'string yes'
        /// </summary>
        public string UIItemEditText = "string yes";
        
        /// <summary>
        /// Verify that 'Unknown Name' text box's property 'Text' equals 'string yes'
        /// </summary>
        public string UIItemEditText1 = "string yes";
        
        /// <summary>
        /// Verify that 'Unknown Name' text box's property 'Text' equals 'B2'
        /// </summary>
        public string UIItemEditText2 = "B2";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class RecordedMethod2Params
    {
        
        #region Fields
        /// <summary>
        /// Type '3+4' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditText = "=3+4";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod3'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class AssertMethod3ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'Unknown Name' text box's property 'Text' equals '3+4'
        /// </summary>
        public string UIItemEditText = "3+4";
        
        /// <summary>
        /// Verify that 'Unknown Name' text box's property 'Text' equals '7'
        /// </summary>
        public string UIItemEditText1 = "7";
        
        /// <summary>
        /// Verify that 'Unknown Name' text box's property 'Text' equals 'C3'
        /// </summary>
        public string UIItemEditText2 = "C3";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod3'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class RecordedMethod3Params
    {
        
        #region Fields
        /// <summary>
        /// Type '=a1' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditText = "=a1";
        
        /// <summary>
        /// Type 'A1' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditText1 = "A1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod4'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class AssertMethod4ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'Unknown Name' text box's property 'Text' equals 'A1'
        /// </summary>
        public string UIItemEditText = "A1";
        
        /// <summary>
        /// Verify that 'Unknown Name' text box's property 'Text' equals '2'
        /// </summary>
        public string UIItemEditText1 = "2";
        
        /// <summary>
        /// Verify that 'Unknown Name' text box's property 'Text' equals 'D4'
        /// </summary>
        public string UIItemEditText2 = "D4";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod6'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class AssertMethod6ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'Unknown Name' text box's property 'Text' equals ''
        /// </summary>
        public string UIItemEditText = "";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod7'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class AssertMethod7ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'Warning' window's property 'Name' equals 'Warning'
        /// </summary>
        public string UIWarningWindowName = "Warning";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod8'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class AssertMethod8ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'Unknown Name' text box's property 'Text' equals 'A1'
        /// </summary>
        public string UIItemEditText = "A1";
        
        /// <summary>
        /// Verify that 'Unknown Name' text box's property 'Text' equals 'D4'
        /// </summary>
        public string UIItemEditText1 = "D4";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod9'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class AssertMethod9ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'Unknown Name' text box's property 'Text' equals 'Test'
        /// </summary>
        public string UIItemEditText = "Test";
        
        /// <summary>
        /// Verify that 'Unknown Name' text box's property 'Text' equals 'A1'
        /// </summary>
        public string UIItemEditText1 = "A1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod10'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class AssertMethod10ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'Unknown Name' text box's property 'Text' equals '42+(90/2)'
        /// </summary>
        public string UIItemEditText = "42+(90/2)";
        
        /// <summary>
        /// Verify that 'Unknown Name' text box's property 'Text' equals 'C3'
        /// </summary>
        public string UIItemEditText1 = "C3";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod10'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class RecordedMethod10Params
    {
        
        #region Fields
        /// <summary>
        /// Type '1' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditText = "1";
        
        /// <summary>
        /// Type '{Enter}' in 'Unknown Name' text box
        /// </summary>
        public string UIItemEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod11'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class AssertMethod11ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'Unknown Name' text box's property 'Text' equals '1'
        /// </summary>
        public string UIItemEditText = "1";
        
        /// <summary>
        /// Verify that 'Unknown Name' text box's property 'Text' equals 'H8'
        /// </summary>
        public string UIItemEditText1 = "H8";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod12'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class AssertMethod12ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'Warning' title bar's property 'FriendlyName' equals 'Warning'
        /// </summary>
        public string UIWarningTitleBarFriendlyName = "Warning";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod13'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class AssertMethod13ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'Save As' title bar's property 'FriendlyName' equals 'Save As'
        /// </summary>
        public string UISaveAsTitleBarFriendlyName = "Save As";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ReplaceOpenClicks'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class ReplaceOpenClicksParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'test.ss' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem = "test.ss";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UISpreadsheetWindow : WinWindow
    {
        
        public UISpreadsheetWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Spreadsheet";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public UIButtonStripMenuBar UIButtonStripMenuBar
        {
            get
            {
                if ((this.mUIButtonStripMenuBar == null))
                {
                    this.mUIButtonStripMenuBar = new UIButtonStripMenuBar(this);
                }
                return this.mUIButtonStripMenuBar;
            }
        }
        
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIItemWindow1 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow1(this);
                }
                return this.mUIItemWindow1;
            }
        }
        
        public UIItemWindow2 UIItemWindow2
        {
            get
            {
                if ((this.mUIItemWindow2 == null))
                {
                    this.mUIItemWindow2 = new UIItemWindow2(this);
                }
                return this.mUIItemWindow2;
            }
        }
        
        public UIA1Window UIA1Window
        {
            get
            {
                if ((this.mUIA1Window == null))
                {
                    this.mUIA1Window = new UIA1Window(this);
                }
                return this.mUIA1Window;
            }
        }
        #endregion
        
        #region Fields
        private UIButtonStripMenuBar mUIButtonStripMenuBar;
        
        private UIItemWindow mUIItemWindow;
        
        private UIItemWindow1 mUIItemWindow1;
        
        private UIItemWindow2 mUIItemWindow2;
        
        private UIA1Window mUIA1Window;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIButtonStripMenuBar : WinMenuBar
    {
        
        public UIButtonStripMenuBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public UIFileMenuItem UIFileMenuItem
        {
            get
            {
                if ((this.mUIFileMenuItem == null))
                {
                    this.mUIFileMenuItem = new UIFileMenuItem(this);
                }
                return this.mUIFileMenuItem;
            }
        }
        
        public WinMenuItem UIHelpMenuItem
        {
            get
            {
                if ((this.mUIHelpMenuItem == null))
                {
                    this.mUIHelpMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIHelpMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Help";
                    this.mUIHelpMenuItem.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUIHelpMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIFileMenuItem mUIFileMenuItem;
        
        private WinMenuItem mUIHelpMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIFileMenuItem : WinMenuItem
    {
        
        public UIFileMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "File";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UICloseMenuItem
        {
            get
            {
                if ((this.mUICloseMenuItem == null))
                {
                    this.mUICloseMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUICloseMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Close";
                    this.mUICloseMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUICloseMenuItem.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUICloseMenuItem;
            }
        }
        
        public WinMenuItem UINewMenuItem
        {
            get
            {
                if ((this.mUINewMenuItem == null))
                {
                    this.mUINewMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUINewMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "New";
                    this.mUINewMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUINewMenuItem.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUINewMenuItem;
            }
        }
        
        public WinMenuItem UIOpenMenuItem
        {
            get
            {
                if ((this.mUIOpenMenuItem == null))
                {
                    this.mUIOpenMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUIOpenMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Open";
                    this.mUIOpenMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIOpenMenuItem.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUIOpenMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUICloseMenuItem;
        
        private WinMenuItem mUINewMenuItem;
        
        private WinMenuItem mUIOpenMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.EDIT", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinEdit UIItemEdit
        {
            get
            {
                if ((this.mUIItemEdit == null))
                {
                    this.mUIItemEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIItemEdit.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUIItemEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIItemEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow1 : WinWindow
    {
        
        public UIItemWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinClient UISSPanelClient
        {
            get
            {
                if ((this.mUISSPanelClient == null))
                {
                    this.mUISSPanelClient = new WinClient(this);
                    #region Search Criteria
                    this.mUISSPanelClient.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUISSPanelClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISSPanelClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow2 : WinWindow
    {
        
        public UIItemWindow2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.EDIT", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinEdit UIItemEdit
        {
            get
            {
                if ((this.mUIItemEdit == null))
                {
                    this.mUIItemEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIItemEdit.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUIItemEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIItemEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIA1Window : WinWindow
    {
        
        public UIA1Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "A1";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.EDIT", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinEdit UIItemEdit
        {
            get
            {
                if ((this.mUIItemEdit == null))
                {
                    this.mUIItemEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIItemEdit.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUIItemEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIItemEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIOKWindow : WinWindow
    {
        
        public UIOKWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "OK";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "Button";
            this.WindowTitles.Add("OK");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("OK");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UISpreadsheetWindow1 : WinWindow
    {
        
        public UISpreadsheetWindow1()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Spreadsheet";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.FilterProperties[WinWindow.PropertyNames.OrderOfInvocation] = "2";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public UISpreadsheetTitleBar UISpreadsheetTitleBar
        {
            get
            {
                if ((this.mUISpreadsheetTitleBar == null))
                {
                    this.mUISpreadsheetTitleBar = new UISpreadsheetTitleBar(this);
                }
                return this.mUISpreadsheetTitleBar;
            }
        }
        
        public UIItemWindow3 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow3(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIButtonStripMenuBar1 UIButtonStripMenuBar
        {
            get
            {
                if ((this.mUIButtonStripMenuBar == null))
                {
                    this.mUIButtonStripMenuBar = new UIButtonStripMenuBar1(this);
                }
                return this.mUIButtonStripMenuBar;
            }
        }
        
        public UITestWindow UITestWindow
        {
            get
            {
                if ((this.mUITestWindow == null))
                {
                    this.mUITestWindow = new UITestWindow(this);
                }
                return this.mUITestWindow;
            }
        }
        
        public UIItemWindow11 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow11(this);
                }
                return this.mUIItemWindow1;
            }
        }
        
        public UIA1Window1 UIA1Window
        {
            get
            {
                if ((this.mUIA1Window == null))
                {
                    this.mUIA1Window = new UIA1Window1(this);
                }
                return this.mUIA1Window;
            }
        }
        #endregion
        
        #region Fields
        private UISpreadsheetTitleBar mUISpreadsheetTitleBar;
        
        private UIItemWindow3 mUIItemWindow;
        
        private UIButtonStripMenuBar1 mUIButtonStripMenuBar;
        
        private UITestWindow mUITestWindow;
        
        private UIItemWindow11 mUIItemWindow1;
        
        private UIA1Window1 mUIA1Window;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UISpreadsheetTitleBar : WinTitleBar
    {
        
        public UISpreadsheetTitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow3 : WinWindow
    {
        
        public UIItemWindow3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinClient UISSPanelClient
        {
            get
            {
                if ((this.mUISSPanelClient == null))
                {
                    this.mUISSPanelClient = new WinClient(this);
                    #region Search Criteria
                    this.mUISSPanelClient.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUISSPanelClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISSPanelClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIButtonStripMenuBar1 : WinMenuBar
    {
        
        public UIButtonStripMenuBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public UIFileMenuItem1 UIFileMenuItem
        {
            get
            {
                if ((this.mUIFileMenuItem == null))
                {
                    this.mUIFileMenuItem = new UIFileMenuItem1(this);
                }
                return this.mUIFileMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIFileMenuItem1 mUIFileMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIFileMenuItem1 : WinMenuItem
    {
        
        public UIFileMenuItem1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "File";
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UICloseMenuItem
        {
            get
            {
                if ((this.mUICloseMenuItem == null))
                {
                    this.mUICloseMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUICloseMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Close";
                    this.mUICloseMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUICloseMenuItem.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUICloseMenuItem;
            }
        }
        
        public WinMenuItem UISaveMenuItem
        {
            get
            {
                if ((this.mUISaveMenuItem == null))
                {
                    this.mUISaveMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUISaveMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Save";
                    this.mUISaveMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUISaveMenuItem.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUISaveMenuItem;
            }
        }
        
        public WinMenuItem UISaveAsMenuItem
        {
            get
            {
                if ((this.mUISaveAsMenuItem == null))
                {
                    this.mUISaveAsMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUISaveAsMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Save As...";
                    this.mUISaveAsMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUISaveAsMenuItem.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUISaveAsMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUICloseMenuItem;
        
        private WinMenuItem mUISaveMenuItem;
        
        private WinMenuItem mUISaveAsMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UITestWindow : WinWindow
    {
        
        public UITestWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Test";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.EDIT", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinEdit UIItemEdit
        {
            get
            {
                if ((this.mUIItemEdit == null))
                {
                    this.mUIItemEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIItemEdit.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUIItemEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIItemEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow11 : WinWindow
    {
        
        public UIItemWindow11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.EDIT", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinEdit UIItemEdit
        {
            get
            {
                if ((this.mUIItemEdit == null))
                {
                    this.mUIItemEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIItemEdit.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUIItemEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIItemEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIA1Window1 : WinWindow
    {
        
        public UIA1Window1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "A1";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.EDIT", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinEdit UIItemEdit
        {
            get
            {
                if ((this.mUIItemEdit == null))
                {
                    this.mUIItemEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIItemEdit.WindowTitles.Add("Spreadsheet");
                    #endregion
                }
                return this.mUIItemEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIItemEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIOpenWindow : WinWindow
    {
        
        public UIOpenWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Open";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public UIItemWindow4 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow4(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIOpenWindow1 UIOpenWindow1
        {
            get
            {
                if ((this.mUIOpenWindow1 == null))
                {
                    this.mUIOpenWindow1 = new UIOpenWindow1(this);
                }
                return this.mUIOpenWindow1;
            }
        }
        
        public UIOpenWindow2 UIOpenWindow2
        {
            get
            {
                if ((this.mUIOpenWindow2 == null))
                {
                    this.mUIOpenWindow2 = new UIOpenWindow2(this);
                }
                return this.mUIOpenWindow2;
            }
        }
        
        public UIOpenWindow3 UIOpenWindow3
        {
            get
            {
                if ((this.mUIOpenWindow3 == null))
                {
                    this.mUIOpenWindow3 = new UIOpenWindow3(this);
                }
                return this.mUIOpenWindow3;
            }
        }
        
        public UICancelWindow UICancelWindow
        {
            get
            {
                if ((this.mUICancelWindow == null))
                {
                    this.mUICancelWindow = new UICancelWindow(this);
                }
                return this.mUICancelWindow;
            }
        }
        
        public UIItemWindow12 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow12(this);
                }
                return this.mUIItemWindow1;
            }
        }
        
        public UIItemWindow21 UIItemWindow2
        {
            get
            {
                if ((this.mUIItemWindow2 == null))
                {
                    this.mUIItemWindow2 = new UIItemWindow21(this);
                }
                return this.mUIItemWindow2;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow4 mUIItemWindow;
        
        private UIOpenWindow1 mUIOpenWindow1;
        
        private UIOpenWindow2 mUIOpenWindow2;
        
        private UIOpenWindow3 mUIOpenWindow3;
        
        private UICancelWindow mUICancelWindow;
        
        private UIItemWindow12 mUIItemWindow1;
        
        private UIItemWindow21 mUIItemWindow2;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow4 : WinWindow
    {
        
        public UIItemWindow4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public UITestssListItem UITestssListItem
        {
            get
            {
                if ((this.mUITestssListItem == null))
                {
                    this.mUITestssListItem = new UITestssListItem(this);
                }
                return this.mUITestssListItem;
            }
        }
        #endregion
        
        #region Fields
        private UITestssListItem mUITestssListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UITestssListItem : WinListItem
    {
        
        public UITestssListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "Test.ss";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIOpenWindow1 : WinWindow
    {
        
        public UIOpenWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinSplitButton UIOpenSplitButton
        {
            get
            {
                if ((this.mUIOpenSplitButton == null))
                {
                    this.mUIOpenSplitButton = new WinSplitButton(this);
                    #region Search Criteria
                    this.mUIOpenSplitButton.SearchProperties[WinButton.PropertyNames.Name] = "Open";
                    this.mUIOpenSplitButton.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUIOpenSplitButton;
            }
        }
        #endregion
        
        #region Fields
        private WinSplitButton mUIOpenSplitButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIOpenWindow2 : WinWindow
    {
        
        public UIOpenWindow2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinSplitButton UIOpenSplitButton
        {
            get
            {
                if ((this.mUIOpenSplitButton == null))
                {
                    this.mUIOpenSplitButton = new WinSplitButton(this);
                    #region Search Criteria
                    this.mUIOpenSplitButton.SearchProperties[WinButton.PropertyNames.Name] = "Open";
                    this.mUIOpenSplitButton.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUIOpenSplitButton;
            }
        }
        #endregion
        
        #region Fields
        private WinSplitButton mUIOpenSplitButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIOpenWindow3 : WinWindow
    {
        
        public UIOpenWindow3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinSplitButton UIOpenSplitButton
        {
            get
            {
                if ((this.mUIOpenSplitButton == null))
                {
                    this.mUIOpenSplitButton = new WinSplitButton(this);
                    #region Search Criteria
                    this.mUIOpenSplitButton.SearchProperties[WinButton.PropertyNames.Name] = "Open";
                    this.mUIOpenSplitButton.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUIOpenSplitButton;
            }
        }
        #endregion
        
        #region Fields
        private WinSplitButton mUIOpenSplitButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UICancelWindow : WinWindow
    {
        
        public UICancelWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinButton UICancelButton
        {
            get
            {
                if ((this.mUICancelButton == null))
                {
                    this.mUICancelButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICancelButton.SearchProperties[WinButton.PropertyNames.Name] = "Cancel";
                    this.mUICancelButton.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUICancelButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICancelButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow12 : WinWindow
    {
        
        public UIItemWindow12(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1148";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "3";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinEdit UIFilenameEdit
        {
            get
            {
                if ((this.mUIFilenameEdit == null))
                {
                    this.mUIFilenameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIFilenameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "File name:";
                    this.mUIFilenameEdit.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUIFilenameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIFilenameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow21 : WinWindow
    {
        
        public UIItemWindow21(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1148";
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Open");
            #endregion
        }
        
        #region Properties
        public WinComboBox UIFilenameComboBox
        {
            get
            {
                if ((this.mUIFilenameComboBox == null))
                {
                    this.mUIFilenameComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUIFilenameComboBox.SearchProperties[WinComboBox.PropertyNames.Name] = "File name:";
                    this.mUIFilenameComboBox.WindowTitles.Add("Open");
                    #endregion
                }
                return this.mUIFilenameComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUIFilenameComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIWarningWindow : WinWindow
    {
        
        public UIWarningWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Warning";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Warning");
            #endregion
        }
        
        #region Properties
        public UINOWindow UINOWindow
        {
            get
            {
                if ((this.mUINOWindow == null))
                {
                    this.mUINOWindow = new UINOWindow(this);
                }
                return this.mUINOWindow;
            }
        }
        
        public UIYesWindow UIYesWindow
        {
            get
            {
                if ((this.mUIYesWindow == null))
                {
                    this.mUIYesWindow = new UIYesWindow(this);
                }
                return this.mUIYesWindow;
            }
        }
        
        public WinTitleBar UIWarningTitleBar
        {
            get
            {
                if ((this.mUIWarningTitleBar == null))
                {
                    this.mUIWarningTitleBar = new WinTitleBar(this);
                    #region Search Criteria
                    this.mUIWarningTitleBar.WindowTitles.Add("Warning");
                    #endregion
                }
                return this.mUIWarningTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private UINOWindow mUINOWindow;
        
        private UIYesWindow mUIYesWindow;
        
        private WinTitleBar mUIWarningTitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UINOWindow : WinWindow
    {
        
        public UINOWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "7";
            this.WindowTitles.Add("Warning");
            #endregion
        }
        
        #region Properties
        public WinButton UINOButton
        {
            get
            {
                if ((this.mUINOButton == null))
                {
                    this.mUINOButton = new WinButton(this);
                    #region Search Criteria
                    this.mUINOButton.SearchProperties[WinButton.PropertyNames.Name] = "No";
                    this.mUINOButton.WindowTitles.Add("Warning");
                    #endregion
                }
                return this.mUINOButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUINOButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIYesWindow : WinWindow
    {
        
        public UIYesWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "6";
            this.WindowTitles.Add("Warning");
            #endregion
        }
        
        #region Properties
        public WinButton UIYesButton
        {
            get
            {
                if ((this.mUIYesButton == null))
                {
                    this.mUIYesButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIYesButton.SearchProperties[WinButton.PropertyNames.Name] = "Yes";
                    this.mUIYesButton.WindowTitles.Add("Warning");
                    #endregion
                }
                return this.mUIYesButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIYesButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UISaveAsWindow : WinWindow
    {
        
        public UISaveAsWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Save As";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public UIItemWindow5 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow5(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UISaveWindow UISaveWindow
        {
            get
            {
                if ((this.mUISaveWindow == null))
                {
                    this.mUISaveWindow = new UISaveWindow(this);
                }
                return this.mUISaveWindow;
            }
        }
        
        public WinTitleBar UISaveAsTitleBar
        {
            get
            {
                if ((this.mUISaveAsTitleBar == null))
                {
                    this.mUISaveAsTitleBar = new WinTitleBar(this);
                    #region Search Criteria
                    this.mUISaveAsTitleBar.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUISaveAsTitleBar;
            }
        }
        
        public UICancelWindow1 UICancelWindow
        {
            get
            {
                if ((this.mUICancelWindow == null))
                {
                    this.mUICancelWindow = new UICancelWindow1(this);
                }
                return this.mUICancelWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow5 mUIItemWindow;
        
        private UISaveWindow mUISaveWindow;
        
        private WinTitleBar mUISaveAsTitleBar;
        
        private UICancelWindow1 mUICancelWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow5 : WinWindow
    {
        
        public UIItemWindow5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public UITestssListItem1 UITestssListItem
        {
            get
            {
                if ((this.mUITestssListItem == null))
                {
                    this.mUITestssListItem = new UITestssListItem1(this);
                }
                return this.mUITestssListItem;
            }
        }
        #endregion
        
        #region Fields
        private UITestssListItem1 mUITestssListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UITestssListItem1 : WinListItem
    {
        
        public UITestssListItem1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "Test.ss";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UISaveWindow : WinWindow
    {
        
        public UISaveWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinButton UISaveButton
        {
            get
            {
                if ((this.mUISaveButton == null))
                {
                    this.mUISaveButton = new WinButton(this);
                    #region Search Criteria
                    this.mUISaveButton.SearchProperties[WinButton.PropertyNames.Name] = "Save";
                    this.mUISaveButton.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUISaveButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUISaveButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UICancelWindow1 : WinWindow
    {
        
        public UICancelWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "2";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinButton UICancelButton
        {
            get
            {
                if ((this.mUICancelButton == null))
                {
                    this.mUICancelButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICancelButton.SearchProperties[WinButton.PropertyNames.Name] = "Cancel";
                    this.mUICancelButton.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUICancelButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICancelButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIConfirmSaveAsWindow : WinWindow
    {
        
        public UIConfirmSaveAsWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Confirm Save As";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Confirm Save As");
            #endregion
        }
        
        #region Properties
        public UIConfirmSaveAsPane UIConfirmSaveAsPane
        {
            get
            {
                if ((this.mUIConfirmSaveAsPane == null))
                {
                    this.mUIConfirmSaveAsPane = new UIConfirmSaveAsPane(this);
                }
                return this.mUIConfirmSaveAsPane;
            }
        }
        #endregion
        
        #region Fields
        private UIConfirmSaveAsPane mUIConfirmSaveAsPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIConfirmSaveAsPane : WinPane
    {
        
        public UIConfirmSaveAsPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Confirm Save As";
            this.WindowTitles.Add("Confirm Save As");
            #endregion
        }
        
        #region Properties
        public WinButton UINOButton
        {
            get
            {
                if ((this.mUINOButton == null))
                {
                    this.mUINOButton = new WinButton(this);
                    #region Search Criteria
                    this.mUINOButton.SearchProperties[WinButton.PropertyNames.Name] = "No";
                    this.mUINOButton.WindowTitles.Add("Confirm Save As");
                    #endregion
                }
                return this.mUINOButton;
            }
        }
        
        public WinButton UIYesButton
        {
            get
            {
                if ((this.mUIYesButton == null))
                {
                    this.mUIYesButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIYesButton.SearchProperties[WinButton.PropertyNames.Name] = "Yes";
                    this.mUIYesButton.WindowTitles.Add("Confirm Save As");
                    #endregion
                }
                return this.mUIYesButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUINOButton;
        
        private WinButton mUIYesButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIToopenanewspreadsheeWindow : WinWindow
    {
        
        public UIToopenanewspreadsheeWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = @"To open a new spreadsheet, select File > New.
To open an existing spreadsheet, select File > Open.
To save a spreadsheet, select File > Save.
To save a spreadsheet to a new location, select File > Save As...
To close a spreadsheet, select File > Close.

To select a new cell, click the box in it's row and column.

To edit a cell's contents, click the Content Text Box in the upper right of the spreadsheet, edit, then press the enter key.

Content formats this spreadsheet accepts:
      Strings (Hello world, Type here, Etc...)
      Doubles (2, 1.0, .031)
      Formulas (=2+3, =A1 * (10 + 2), =J31/u7 + a1 * 3)";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "Static";
            this.WindowTitles.Add(@"To open a new spreadsheet, select File > New.
To open an existing spreadsheet, select File > Open.
To save a spreadsheet, select File > Save.
To save a spreadsheet to a new location, select File > Save As...
To close a spreadsheet, select File > Close.

To select a new cell, click the box in it's row and column.

To edit a cell's contents, click the Content Text Box in the upper right of the spreadsheet, edit, then press the enter key.

Content formats this spreadsheet accepts:
      Strings (Hello world, Type here, Etc...)
      Doubles (2, 1.0, .031)
      Formulas (=2+3, =A1 * (10 + 2), =J31/u7 + a1 * 3)");
            #endregion
        }
        
        #region Properties
        public WinText UIToopenanewspreadsheeText
        {
            get
            {
                if ((this.mUIToopenanewspreadsheeText == null))
                {
                    this.mUIToopenanewspreadsheeText = new WinText(this);
                    #region Search Criteria
                    this.mUIToopenanewspreadsheeText.SearchProperties[WinText.PropertyNames.Name] = @"To open a new spreadsheet, select File > New.To open an existing spreadsheet, select File > Open.To save a spreadsheet, select File > Save.To save a spreadsheet to a new location, select File > Save As...To close a spreadsheet, select File > Close.To select a new cell, click the box in it's row and column.To edit a cell's contents, click the Content Text Box in the upper right of the spreadsheet, edit, then press the enter key.Content formats this spreadsheet accepts:      Strings (Hello world, Type here, Etc...)      Doubles (2, 1.0, .031)      Formulas (=2+3, =A1 * (10 + 2), =J31/u7 + a1 * 3)";
                    this.mUIToopenanewspreadsheeText.WindowTitles.Add(@"To open a new spreadsheet, select File > New.
To open an existing spreadsheet, select File > Open.
To save a spreadsheet, select File > Save.
To save a spreadsheet to a new location, select File > Save As...
To close a spreadsheet, select File > Close.

To select a new cell, click the box in it's row and column.

To edit a cell's contents, click the Content Text Box in the upper right of the spreadsheet, edit, then press the enter key.

Content formats this spreadsheet accepts:
      Strings (Hello world, Type here, Etc...)
      Doubles (2, 1.0, .031)
      Formulas (=2+3, =A1 * (10 + 2), =J31/u7 + a1 * 3)");
                    #endregion
                }
                return this.mUIToopenanewspreadsheeText;
            }
        }
        #endregion
        
        #region Fields
        private WinText mUIToopenanewspreadsheeText;
        #endregion
    }
}
